// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search_store.proto

#include "search_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_search_5fstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MockData_search_5fstore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_search_5fstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreIndexField_search_5fstore_2eproto;
namespace lsmsearch {
class StoreIndexFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreIndexField> _instance;
} _StoreIndexField_default_instance_;
class StoreDocumentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreDocument> _instance;
} _StoreDocument_default_instance_;
class StoreDocValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreDocValue> _instance;
} _StoreDocValue_default_instance_;
class StoreMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreMeta> _instance;
} _StoreMeta_default_instance_;
class MockDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MockData> _instance;
} _MockData_default_instance_;
class MockDataListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MockDataList> _instance;
} _MockDataList_default_instance_;
}  // namespace lsmsearch
static void InitDefaultsscc_info_MockData_search_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lsmsearch::_MockData_default_instance_;
    new (ptr) ::lsmsearch::MockData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MockData_search_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MockData_search_5fstore_2eproto}, {}};

static void InitDefaultsscc_info_MockDataList_search_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lsmsearch::_MockDataList_default_instance_;
    new (ptr) ::lsmsearch::MockDataList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MockDataList_search_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MockDataList_search_5fstore_2eproto}, {
      &scc_info_MockData_search_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_StoreDocValue_search_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lsmsearch::_StoreDocValue_default_instance_;
    new (ptr) ::lsmsearch::StoreDocValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StoreDocValue_search_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StoreDocValue_search_5fstore_2eproto}, {
      &scc_info_StoreIndexField_search_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_StoreDocument_search_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lsmsearch::_StoreDocument_default_instance_;
    new (ptr) ::lsmsearch::StoreDocument();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StoreDocument_search_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StoreDocument_search_5fstore_2eproto}, {
      &scc_info_StoreIndexField_search_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_StoreIndexField_search_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lsmsearch::_StoreIndexField_default_instance_;
    new (ptr) ::lsmsearch::StoreIndexField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreIndexField_search_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StoreIndexField_search_5fstore_2eproto}, {}};

static void InitDefaultsscc_info_StoreMeta_search_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lsmsearch::_StoreMeta_default_instance_;
    new (ptr) ::lsmsearch::StoreMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreMeta_search_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StoreMeta_search_5fstore_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_search_5fstore_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_search_5fstore_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_search_5fstore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_search_5fstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, field_id_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, field_flag_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, field_type_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, numeric_value_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, string_value_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, terms_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreIndexField, suffix_len_),
  1,
  2,
  4,
  3,
  0,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreDocument, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreDocument, document_id_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreDocument, fields_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreDocValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreDocValue, fields_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreMeta, total_documents_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreMeta, delete_documents_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreMeta, increase_seq_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::StoreMeta, terms_count_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockData, column_type_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockData, key_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockData, value_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockData, type_),
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockData, end_key_),
  3,
  0,
  1,
  4,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lsmsearch::MockDataList, mock_data_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::lsmsearch::StoreIndexField)},
  { 19, 26, sizeof(::lsmsearch::StoreDocument)},
  { 28, -1, sizeof(::lsmsearch::StoreDocValue)},
  { 34, 43, sizeof(::lsmsearch::StoreMeta)},
  { 47, 57, sizeof(::lsmsearch::MockData)},
  { 62, -1, sizeof(::lsmsearch::MockDataList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lsmsearch::_StoreIndexField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lsmsearch::_StoreDocument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lsmsearch::_StoreDocValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lsmsearch::_StoreMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lsmsearch::_MockData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lsmsearch::_MockDataList_default_instance_),
};

const char descriptor_table_protodef_search_5fstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022search_store.proto\022\tlsmsearch\"\233\001\n\017Stor"
  "eIndexField\022\020\n\010field_id\030\001 \002(\r\022\022\n\nfield_f"
  "lag\030\002 \002(\r\022\022\n\nfield_type\030\003 \002(\r\022\025\n\rnumeric"
  "_value\030\004 \001(\004\022\024\n\014string_value\030\005 \001(\014\022\r\n\005te"
  "rms\030\006 \003(\014\022\022\n\nsuffix_len\030\n \001(\r\"P\n\rStoreDo"
  "cument\022\023\n\013document_id\030\001 \002(\004\022*\n\006fields\030\002 "
  "\003(\0132\032.lsmsearch.StoreIndexField\";\n\rStore"
  "DocValue\022*\n\006fields\030\001 \003(\0132\032.lsmsearch.Sto"
  "reIndexField\"i\n\tStoreMeta\022\027\n\017total_docum"
  "ents\030\001 \001(\004\022\030\n\020delete_documents\030\002 \001(\004\022\024\n\014"
  "increase_seq\030\003 \001(\004\022\023\n\013terms_count\030\004 \001(\004\""
  "\302\001\n\010MockData\022\023\n\013column_type\030\001 \002(\r\022\013\n\003key"
  "\030\002 \002(\014\022\r\n\005value\030\003 \002(\014\022&\n\004type\030\004 \002(\0162\030.ls"
  "msearch.MockData.Type\022\017\n\007end_key\030\005 \001(\014\"L"
  "\n\004Type\022\014\n\010kUnknown\020\000\022\013\n\007kUpdate\020\001\022\n\n\006kMe"
  "rge\020\002\022\013\n\007kDelete\020\003\022\020\n\014kDeleteRange\020\004\";\n\014"
  "MockDataList\022+\n\016mock_data_list\030\001 \003(\0132\023.l"
  "smsearch.MockData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_search_5fstore_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_search_5fstore_2eproto_sccs[6] = {
  &scc_info_MockData_search_5fstore_2eproto.base,
  &scc_info_MockDataList_search_5fstore_2eproto.base,
  &scc_info_StoreDocValue_search_5fstore_2eproto.base,
  &scc_info_StoreDocument_search_5fstore_2eproto.base,
  &scc_info_StoreIndexField_search_5fstore_2eproto.base,
  &scc_info_StoreMeta_search_5fstore_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_search_5fstore_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_5fstore_2eproto = {
  false, false, descriptor_table_protodef_search_5fstore_2eproto, "search_store.proto", 697,
  &descriptor_table_search_5fstore_2eproto_once, descriptor_table_search_5fstore_2eproto_sccs, descriptor_table_search_5fstore_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_search_5fstore_2eproto::offsets,
  file_level_metadata_search_5fstore_2eproto, 6, file_level_enum_descriptors_search_5fstore_2eproto, file_level_service_descriptors_search_5fstore_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_search_5fstore_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_search_5fstore_2eproto)), true);
namespace lsmsearch {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MockData_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_search_5fstore_2eproto);
  return file_level_enum_descriptors_search_5fstore_2eproto[0];
}
bool MockData_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MockData_Type MockData::kUnknown;
constexpr MockData_Type MockData::kUpdate;
constexpr MockData_Type MockData::kMerge;
constexpr MockData_Type MockData::kDelete;
constexpr MockData_Type MockData::kDeleteRange;
constexpr MockData_Type MockData::Type_MIN;
constexpr MockData_Type MockData::Type_MAX;
constexpr int MockData::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class StoreIndexField::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreIndexField>()._has_bits_);
  static void set_has_field_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_numeric_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suffix_len(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000016) ^ 0x00000016) != 0;
  }
};

StoreIndexField::StoreIndexField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  terms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lsmsearch.StoreIndexField)
}
StoreIndexField::StoreIndexField(const StoreIndexField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      terms_(from.terms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string_value(),
      GetArena());
  }
  ::memcpy(&field_id_, &from.field_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&suffix_len_) -
    reinterpret_cast<char*>(&field_id_)) + sizeof(suffix_len_));
  // @@protoc_insertion_point(copy_constructor:lsmsearch.StoreIndexField)
}

void StoreIndexField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreIndexField_search_5fstore_2eproto.base);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suffix_len_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(suffix_len_));
}

StoreIndexField::~StoreIndexField() {
  // @@protoc_insertion_point(destructor:lsmsearch.StoreIndexField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreIndexField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoreIndexField::ArenaDtor(void* object) {
  StoreIndexField* _this = reinterpret_cast< StoreIndexField* >(object);
  (void)_this;
}
void StoreIndexField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreIndexField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreIndexField& StoreIndexField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreIndexField_search_5fstore_2eproto.base);
  return *internal_default_instance();
}


void StoreIndexField::Clear() {
// @@protoc_insertion_point(message_clear_start:lsmsearch.StoreIndexField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&field_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suffix_len_) -
        reinterpret_cast<char*>(&field_id_)) + sizeof(suffix_len_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreIndexField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 field_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field_id(&has_bits);
          field_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 field_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_flag(&has_bits);
          field_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 field_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_field_type(&has_bits);
          field_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 numeric_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_numeric_value(&has_bits);
          numeric_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes terms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_terms();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 suffix_len = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_suffix_len(&has_bits);
          suffix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreIndexField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lsmsearch.StoreIndexField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 field_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field_id(), target);
  }

  // required uint32 field_flag = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_field_flag(), target);
  }

  // required uint32 field_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_field_type(), target);
  }

  // optional uint64 numeric_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_numeric_value(), target);
  }

  // optional bytes string_value = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_string_value(), target);
  }

  // repeated bytes terms = 6;
  for (int i = 0, n = this->_internal_terms_size(); i < n; i++) {
    const auto& s = this->_internal_terms(i);
    target = stream->WriteBytes(6, s, target);
  }

  // optional uint32 suffix_len = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_suffix_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lsmsearch.StoreIndexField)
  return target;
}

size_t StoreIndexField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lsmsearch.StoreIndexField)
  size_t total_size = 0;

  if (_internal_has_field_id()) {
    // required uint32 field_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_id());
  }

  if (_internal_has_field_flag()) {
    // required uint32 field_flag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_flag());
  }

  if (_internal_has_field_type()) {
    // required uint32 field_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_type());
  }

  return total_size;
}
size_t StoreIndexField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lsmsearch.StoreIndexField)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000016) ^ 0x00000016) == 0) {  // All required fields are present.
    // required uint32 field_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_id());

    // required uint32 field_flag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_flag());

    // required uint32 field_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes terms = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(terms_.size());
  for (int i = 0, n = terms_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      terms_.Get(i));
  }

  // optional bytes string_value = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_string_value());
  }

  // optional uint64 numeric_value = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_numeric_value());
  }

  // optional uint32 suffix_len = 10;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_suffix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreIndexField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lsmsearch.StoreIndexField)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreIndexField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreIndexField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lsmsearch.StoreIndexField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lsmsearch.StoreIndexField)
    MergeFrom(*source);
  }
}

void StoreIndexField::MergeFrom(const StoreIndexField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lsmsearch.StoreIndexField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  terms_.MergeFrom(from.terms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      field_id_ = from.field_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_flag_ = from.field_flag_;
    }
    if (cached_has_bits & 0x00000008u) {
      numeric_value_ = from.numeric_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_type_ = from.field_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      suffix_len_ = from.suffix_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreIndexField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lsmsearch.StoreIndexField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIndexField::CopyFrom(const StoreIndexField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lsmsearch.StoreIndexField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIndexField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StoreIndexField::InternalSwap(StoreIndexField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  terms_.InternalSwap(&other->terms_);
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreIndexField, suffix_len_)
      + sizeof(StoreIndexField::suffix_len_)
      - PROTOBUF_FIELD_OFFSET(StoreIndexField, field_id_)>(
          reinterpret_cast<char*>(&field_id_),
          reinterpret_cast<char*>(&other->field_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreIndexField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StoreDocument::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreDocument>()._has_bits_);
  static void set_has_document_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StoreDocument::StoreDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lsmsearch.StoreDocument)
}
StoreDocument::StoreDocument(const StoreDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  document_id_ = from.document_id_;
  // @@protoc_insertion_point(copy_constructor:lsmsearch.StoreDocument)
}

void StoreDocument::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreDocument_search_5fstore_2eproto.base);
  document_id_ = PROTOBUF_ULONGLONG(0);
}

StoreDocument::~StoreDocument() {
  // @@protoc_insertion_point(destructor:lsmsearch.StoreDocument)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StoreDocument::ArenaDtor(void* object) {
  StoreDocument* _this = reinterpret_cast< StoreDocument* >(object);
  (void)_this;
}
void StoreDocument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreDocument& StoreDocument::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreDocument_search_5fstore_2eproto.base);
  return *internal_default_instance();
}


void StoreDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:lsmsearch.StoreDocument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  document_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreDocument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 document_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_document_id(&has_bits);
          document_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lsmsearch.StoreIndexField fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreDocument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lsmsearch.StoreDocument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 document_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_document_id(), target);
  }

  // repeated .lsmsearch.StoreIndexField fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lsmsearch.StoreDocument)
  return target;
}

size_t StoreDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lsmsearch.StoreDocument)
  size_t total_size = 0;

  // required uint64 document_id = 1;
  if (_internal_has_document_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_document_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lsmsearch.StoreIndexField fields = 2;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreDocument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lsmsearch.StoreDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreDocument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreDocument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lsmsearch.StoreDocument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lsmsearch.StoreDocument)
    MergeFrom(*source);
  }
}

void StoreDocument::MergeFrom(const StoreDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lsmsearch.StoreDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from._internal_has_document_id()) {
    _internal_set_document_id(from._internal_document_id());
  }
}

void StoreDocument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lsmsearch.StoreDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDocument::CopyFrom(const StoreDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lsmsearch.StoreDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDocument::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fields_)) return false;
  return true;
}

void StoreDocument::InternalSwap(StoreDocument* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fields_.InternalSwap(&other->fields_);
  swap(document_id_, other->document_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreDocument::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StoreDocValue::_Internal {
 public:
};

StoreDocValue::StoreDocValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lsmsearch.StoreDocValue)
}
StoreDocValue::StoreDocValue(const StoreDocValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lsmsearch.StoreDocValue)
}

void StoreDocValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreDocValue_search_5fstore_2eproto.base);
}

StoreDocValue::~StoreDocValue() {
  // @@protoc_insertion_point(destructor:lsmsearch.StoreDocValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreDocValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StoreDocValue::ArenaDtor(void* object) {
  StoreDocValue* _this = reinterpret_cast< StoreDocValue* >(object);
  (void)_this;
}
void StoreDocValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreDocValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreDocValue& StoreDocValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreDocValue_search_5fstore_2eproto.base);
  return *internal_default_instance();
}


void StoreDocValue::Clear() {
// @@protoc_insertion_point(message_clear_start:lsmsearch.StoreDocValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreDocValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lsmsearch.StoreIndexField fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreDocValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lsmsearch.StoreDocValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lsmsearch.StoreIndexField fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lsmsearch.StoreDocValue)
  return target;
}

size_t StoreDocValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lsmsearch.StoreDocValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lsmsearch.StoreIndexField fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreDocValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lsmsearch.StoreDocValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreDocValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreDocValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lsmsearch.StoreDocValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lsmsearch.StoreDocValue)
    MergeFrom(*source);
  }
}

void StoreDocValue::MergeFrom(const StoreDocValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lsmsearch.StoreDocValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void StoreDocValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lsmsearch.StoreDocValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDocValue::CopyFrom(const StoreDocValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lsmsearch.StoreDocValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDocValue::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fields_)) return false;
  return true;
}

void StoreDocValue::InternalSwap(StoreDocValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreDocValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StoreMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreMeta>()._has_bits_);
  static void set_has_total_documents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delete_documents(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_increase_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_terms_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

StoreMeta::StoreMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lsmsearch.StoreMeta)
}
StoreMeta::StoreMeta(const StoreMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_documents_, &from.total_documents_,
    static_cast<size_t>(reinterpret_cast<char*>(&terms_count_) -
    reinterpret_cast<char*>(&total_documents_)) + sizeof(terms_count_));
  // @@protoc_insertion_point(copy_constructor:lsmsearch.StoreMeta)
}

void StoreMeta::SharedCtor() {
  ::memset(&total_documents_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&terms_count_) -
      reinterpret_cast<char*>(&total_documents_)) + sizeof(terms_count_));
}

StoreMeta::~StoreMeta() {
  // @@protoc_insertion_point(destructor:lsmsearch.StoreMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StoreMeta::ArenaDtor(void* object) {
  StoreMeta* _this = reinterpret_cast< StoreMeta* >(object);
  (void)_this;
}
void StoreMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreMeta& StoreMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreMeta_search_5fstore_2eproto.base);
  return *internal_default_instance();
}


void StoreMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:lsmsearch.StoreMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&total_documents_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&terms_count_) -
        reinterpret_cast<char*>(&total_documents_)) + sizeof(terms_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 total_documents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total_documents(&has_bits);
          total_documents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 delete_documents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delete_documents(&has_bits);
          delete_documents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 increase_seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_increase_seq(&has_bits);
          increase_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 terms_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_terms_count(&has_bits);
          terms_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lsmsearch.StoreMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 total_documents = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_total_documents(), target);
  }

  // optional uint64 delete_documents = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_delete_documents(), target);
  }

  // optional uint64 increase_seq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_increase_seq(), target);
  }

  // optional uint64 terms_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_terms_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lsmsearch.StoreMeta)
  return target;
}

size_t StoreMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lsmsearch.StoreMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 total_documents = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_total_documents());
    }

    // optional uint64 delete_documents = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_delete_documents());
    }

    // optional uint64 increase_seq = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_increase_seq());
    }

    // optional uint64 terms_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_terms_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lsmsearch.StoreMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lsmsearch.StoreMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lsmsearch.StoreMeta)
    MergeFrom(*source);
  }
}

void StoreMeta::MergeFrom(const StoreMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lsmsearch.StoreMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      total_documents_ = from.total_documents_;
    }
    if (cached_has_bits & 0x00000002u) {
      delete_documents_ = from.delete_documents_;
    }
    if (cached_has_bits & 0x00000004u) {
      increase_seq_ = from.increase_seq_;
    }
    if (cached_has_bits & 0x00000008u) {
      terms_count_ = from.terms_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lsmsearch.StoreMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreMeta::CopyFrom(const StoreMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lsmsearch.StoreMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreMeta::IsInitialized() const {
  return true;
}

void StoreMeta::InternalSwap(StoreMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreMeta, terms_count_)
      + sizeof(StoreMeta::terms_count_)
      - PROTOBUF_FIELD_OFFSET(StoreMeta, total_documents_)>(
          reinterpret_cast<char*>(&total_documents_),
          reinterpret_cast<char*>(&other->total_documents_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MockData::_Internal {
 public:
  using HasBits = decltype(std::declval<MockData>()._has_bits_);
  static void set_has_column_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001b) ^ 0x0000001b) != 0;
  }
};

MockData::MockData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lsmsearch.MockData)
}
MockData::MockData(const MockData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_end_key()) {
    end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_key(),
      GetArena());
  }
  ::memcpy(&column_type_, &from.column_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&column_type_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:lsmsearch.MockData)
}

void MockData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MockData_search_5fstore_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&column_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&column_type_)) + sizeof(type_));
}

MockData::~MockData() {
  // @@protoc_insertion_point(destructor:lsmsearch.MockData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MockData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MockData::ArenaDtor(void* object) {
  MockData* _this = reinterpret_cast< MockData* >(object);
  (void)_this;
}
void MockData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MockData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MockData& MockData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MockData_search_5fstore_2eproto.base);
  return *internal_default_instance();
}


void MockData::Clear() {
// @@protoc_insertion_point(message_clear_start:lsmsearch.MockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      end_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&column_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&column_type_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MockData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 column_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column_type(&has_bits);
          column_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .lsmsearch.MockData.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::lsmsearch::MockData_Type_IsValid(val))) {
            _internal_set_type(static_cast<::lsmsearch::MockData_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes end_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_end_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MockData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lsmsearch.MockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column_type(), target);
  }

  // required bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // required bytes value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // required .lsmsearch.MockData.Type type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional bytes end_key = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_end_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lsmsearch.MockData)
  return target;
}

size_t MockData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lsmsearch.MockData)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required bytes key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required bytes value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (_internal_has_column_type()) {
    // required uint32 column_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_type());
  }

  if (_internal_has_type()) {
    // required .lsmsearch.MockData.Type type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t MockData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lsmsearch.MockData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required bytes key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());

    // required bytes value = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());

    // required uint32 column_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_type());

    // required .lsmsearch.MockData.Type type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes end_key = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MockData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lsmsearch.MockData)
  GOOGLE_DCHECK_NE(&from, this);
  const MockData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MockData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lsmsearch.MockData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lsmsearch.MockData)
    MergeFrom(*source);
  }
}

void MockData::MergeFrom(const MockData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lsmsearch.MockData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_end_key(from._internal_end_key());
    }
    if (cached_has_bits & 0x00000008u) {
      column_type_ = from.column_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MockData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lsmsearch.MockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MockData::CopyFrom(const MockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lsmsearch.MockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MockData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MockData::InternalSwap(MockData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_key_.Swap(&other->end_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MockData, type_)
      + sizeof(MockData::type_)
      - PROTOBUF_FIELD_OFFSET(MockData, column_type_)>(
          reinterpret_cast<char*>(&column_type_),
          reinterpret_cast<char*>(&other->column_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MockData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MockDataList::_Internal {
 public:
};

MockDataList::MockDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mock_data_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lsmsearch.MockDataList)
}
MockDataList::MockDataList(const MockDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mock_data_list_(from.mock_data_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lsmsearch.MockDataList)
}

void MockDataList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MockDataList_search_5fstore_2eproto.base);
}

MockDataList::~MockDataList() {
  // @@protoc_insertion_point(destructor:lsmsearch.MockDataList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MockDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MockDataList::ArenaDtor(void* object) {
  MockDataList* _this = reinterpret_cast< MockDataList* >(object);
  (void)_this;
}
void MockDataList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MockDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MockDataList& MockDataList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MockDataList_search_5fstore_2eproto.base);
  return *internal_default_instance();
}


void MockDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:lsmsearch.MockDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mock_data_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MockDataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lsmsearch.MockData mock_data_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mock_data_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MockDataList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lsmsearch.MockDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lsmsearch.MockData mock_data_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mock_data_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mock_data_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lsmsearch.MockDataList)
  return target;
}

size_t MockDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lsmsearch.MockDataList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lsmsearch.MockData mock_data_list = 1;
  total_size += 1UL * this->_internal_mock_data_list_size();
  for (const auto& msg : this->mock_data_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MockDataList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lsmsearch.MockDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const MockDataList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MockDataList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lsmsearch.MockDataList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lsmsearch.MockDataList)
    MergeFrom(*source);
  }
}

void MockDataList::MergeFrom(const MockDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lsmsearch.MockDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mock_data_list_.MergeFrom(from.mock_data_list_);
}

void MockDataList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lsmsearch.MockDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MockDataList::CopyFrom(const MockDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lsmsearch.MockDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MockDataList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mock_data_list_)) return false;
  return true;
}

void MockDataList::InternalSwap(MockDataList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mock_data_list_.InternalSwap(&other->mock_data_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MockDataList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lsmsearch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lsmsearch::StoreIndexField* Arena::CreateMaybeMessage< ::lsmsearch::StoreIndexField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lsmsearch::StoreIndexField >(arena);
}
template<> PROTOBUF_NOINLINE ::lsmsearch::StoreDocument* Arena::CreateMaybeMessage< ::lsmsearch::StoreDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lsmsearch::StoreDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::lsmsearch::StoreDocValue* Arena::CreateMaybeMessage< ::lsmsearch::StoreDocValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lsmsearch::StoreDocValue >(arena);
}
template<> PROTOBUF_NOINLINE ::lsmsearch::StoreMeta* Arena::CreateMaybeMessage< ::lsmsearch::StoreMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lsmsearch::StoreMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::lsmsearch::MockData* Arena::CreateMaybeMessage< ::lsmsearch::MockData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lsmsearch::MockData >(arena);
}
template<> PROTOBUF_NOINLINE ::lsmsearch::MockDataList* Arena::CreateMaybeMessage< ::lsmsearch::MockDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lsmsearch::MockDataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
