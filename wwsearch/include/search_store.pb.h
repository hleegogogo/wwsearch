// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_search_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_search_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_search_5fstore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_5fstore_2eproto;
namespace lsmsearch {
class MockData;
class MockDataDefaultTypeInternal;
extern MockDataDefaultTypeInternal _MockData_default_instance_;
class MockDataList;
class MockDataListDefaultTypeInternal;
extern MockDataListDefaultTypeInternal _MockDataList_default_instance_;
class StoreDocValue;
class StoreDocValueDefaultTypeInternal;
extern StoreDocValueDefaultTypeInternal _StoreDocValue_default_instance_;
class StoreDocument;
class StoreDocumentDefaultTypeInternal;
extern StoreDocumentDefaultTypeInternal _StoreDocument_default_instance_;
class StoreIndexField;
class StoreIndexFieldDefaultTypeInternal;
extern StoreIndexFieldDefaultTypeInternal _StoreIndexField_default_instance_;
class StoreMeta;
class StoreMetaDefaultTypeInternal;
extern StoreMetaDefaultTypeInternal _StoreMeta_default_instance_;
}  // namespace lsmsearch
PROTOBUF_NAMESPACE_OPEN
template<> ::lsmsearch::MockData* Arena::CreateMaybeMessage<::lsmsearch::MockData>(Arena*);
template<> ::lsmsearch::MockDataList* Arena::CreateMaybeMessage<::lsmsearch::MockDataList>(Arena*);
template<> ::lsmsearch::StoreDocValue* Arena::CreateMaybeMessage<::lsmsearch::StoreDocValue>(Arena*);
template<> ::lsmsearch::StoreDocument* Arena::CreateMaybeMessage<::lsmsearch::StoreDocument>(Arena*);
template<> ::lsmsearch::StoreIndexField* Arena::CreateMaybeMessage<::lsmsearch::StoreIndexField>(Arena*);
template<> ::lsmsearch::StoreMeta* Arena::CreateMaybeMessage<::lsmsearch::StoreMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lsmsearch {

enum MockData_Type : int {
  MockData_Type_kUnknown = 0,
  MockData_Type_kUpdate = 1,
  MockData_Type_kMerge = 2,
  MockData_Type_kDelete = 3,
  MockData_Type_kDeleteRange = 4
};
bool MockData_Type_IsValid(int value);
constexpr MockData_Type MockData_Type_Type_MIN = MockData_Type_kUnknown;
constexpr MockData_Type MockData_Type_Type_MAX = MockData_Type_kDeleteRange;
constexpr int MockData_Type_Type_ARRAYSIZE = MockData_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MockData_Type_descriptor();
template<typename T>
inline const std::string& MockData_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MockData_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MockData_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MockData_Type_descriptor(), enum_t_value);
}
inline bool MockData_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MockData_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MockData_Type>(
    MockData_Type_descriptor(), name, value);
}
// ===================================================================

class StoreIndexField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsmsearch.StoreIndexField) */ {
 public:
  inline StoreIndexField() : StoreIndexField(nullptr) {}
  ~StoreIndexField() override;

  StoreIndexField(const StoreIndexField& from);
  StoreIndexField(StoreIndexField&& from) noexcept
    : StoreIndexField() {
    *this = ::std::move(from);
  }

  inline StoreIndexField& operator=(const StoreIndexField& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreIndexField& operator=(StoreIndexField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreIndexField& default_instance();

  static inline const StoreIndexField* internal_default_instance() {
    return reinterpret_cast<const StoreIndexField*>(
               &_StoreIndexField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoreIndexField& a, StoreIndexField& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreIndexField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreIndexField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreIndexField* New() const final {
    return CreateMaybeMessage<StoreIndexField>(nullptr);
  }

  StoreIndexField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreIndexField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreIndexField& from);
  void MergeFrom(const StoreIndexField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreIndexField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsmsearch.StoreIndexField";
  }
  protected:
  explicit StoreIndexField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_5fstore_2eproto);
    return ::descriptor_table_search_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermsFieldNumber = 6,
    kStringValueFieldNumber = 5,
    kFieldIdFieldNumber = 1,
    kFieldFlagFieldNumber = 2,
    kNumericValueFieldNumber = 4,
    kFieldTypeFieldNumber = 3,
    kSuffixLenFieldNumber = 10,
  };
  // repeated bytes terms = 6;
  int terms_size() const;
  private:
  int _internal_terms_size() const;
  public:
  void clear_terms();
  const std::string& terms(int index) const;
  std::string* mutable_terms(int index);
  void set_terms(int index, const std::string& value);
  void set_terms(int index, std::string&& value);
  void set_terms(int index, const char* value);
  void set_terms(int index, const void* value, size_t size);
  std::string* add_terms();
  void add_terms(const std::string& value);
  void add_terms(std::string&& value);
  void add_terms(const char* value);
  void add_terms(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& terms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_terms();
  private:
  const std::string& _internal_terms(int index) const;
  std::string* _internal_add_terms();
  public:

  // optional bytes string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const void* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // required uint32 field_id = 1;
  bool has_field_id() const;
  private:
  bool _internal_has_field_id() const;
  public:
  void clear_field_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_id() const;
  void set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field_id() const;
  void _internal_set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 field_flag = 2;
  bool has_field_flag() const;
  private:
  bool _internal_has_field_flag() const;
  public:
  void clear_field_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_flag() const;
  void set_field_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field_flag() const;
  void _internal_set_field_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 numeric_value = 4;
  bool has_numeric_value() const;
  private:
  bool _internal_has_numeric_value() const;
  public:
  void clear_numeric_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 numeric_value() const;
  void set_numeric_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_numeric_value() const;
  void _internal_set_numeric_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 field_type = 3;
  bool has_field_type() const;
  private:
  bool _internal_has_field_type() const;
  public:
  void clear_field_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_type() const;
  void set_field_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field_type() const;
  void _internal_set_field_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 suffix_len = 10;
  bool has_suffix_len() const;
  private:
  bool _internal_has_suffix_len() const;
  public:
  void clear_suffix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 suffix_len() const;
  void set_suffix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_suffix_len() const;
  void _internal_set_suffix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lsmsearch.StoreIndexField)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> terms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint64 numeric_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suffix_len_;
  friend struct ::TableStruct_search_5fstore_2eproto;
};
// -------------------------------------------------------------------

class StoreDocument PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsmsearch.StoreDocument) */ {
 public:
  inline StoreDocument() : StoreDocument(nullptr) {}
  ~StoreDocument() override;

  StoreDocument(const StoreDocument& from);
  StoreDocument(StoreDocument&& from) noexcept
    : StoreDocument() {
    *this = ::std::move(from);
  }

  inline StoreDocument& operator=(const StoreDocument& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreDocument& operator=(StoreDocument&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreDocument& default_instance();

  static inline const StoreDocument* internal_default_instance() {
    return reinterpret_cast<const StoreDocument*>(
               &_StoreDocument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StoreDocument& a, StoreDocument& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreDocument* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreDocument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreDocument* New() const final {
    return CreateMaybeMessage<StoreDocument>(nullptr);
  }

  StoreDocument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreDocument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreDocument& from);
  void MergeFrom(const StoreDocument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreDocument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsmsearch.StoreDocument";
  }
  protected:
  explicit StoreDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_5fstore_2eproto);
    return ::descriptor_table_search_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kDocumentIdFieldNumber = 1,
  };
  // repeated .lsmsearch.StoreIndexField fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::lsmsearch::StoreIndexField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >*
      mutable_fields();
  private:
  const ::lsmsearch::StoreIndexField& _internal_fields(int index) const;
  ::lsmsearch::StoreIndexField* _internal_add_fields();
  public:
  const ::lsmsearch::StoreIndexField& fields(int index) const;
  ::lsmsearch::StoreIndexField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >&
      fields() const;

  // required uint64 document_id = 1;
  bool has_document_id() const;
  private:
  bool _internal_has_document_id() const;
  public:
  void clear_document_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 document_id() const;
  void set_document_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_document_id() const;
  void _internal_set_document_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lsmsearch.StoreDocument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField > fields_;
  ::PROTOBUF_NAMESPACE_ID::uint64 document_id_;
  friend struct ::TableStruct_search_5fstore_2eproto;
};
// -------------------------------------------------------------------

class StoreDocValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsmsearch.StoreDocValue) */ {
 public:
  inline StoreDocValue() : StoreDocValue(nullptr) {}
  ~StoreDocValue() override;

  StoreDocValue(const StoreDocValue& from);
  StoreDocValue(StoreDocValue&& from) noexcept
    : StoreDocValue() {
    *this = ::std::move(from);
  }

  inline StoreDocValue& operator=(const StoreDocValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreDocValue& operator=(StoreDocValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreDocValue& default_instance();

  static inline const StoreDocValue* internal_default_instance() {
    return reinterpret_cast<const StoreDocValue*>(
               &_StoreDocValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StoreDocValue& a, StoreDocValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreDocValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreDocValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreDocValue* New() const final {
    return CreateMaybeMessage<StoreDocValue>(nullptr);
  }

  StoreDocValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreDocValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreDocValue& from);
  void MergeFrom(const StoreDocValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreDocValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsmsearch.StoreDocValue";
  }
  protected:
  explicit StoreDocValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_5fstore_2eproto);
    return ::descriptor_table_search_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .lsmsearch.StoreIndexField fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::lsmsearch::StoreIndexField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >*
      mutable_fields();
  private:
  const ::lsmsearch::StoreIndexField& _internal_fields(int index) const;
  ::lsmsearch::StoreIndexField* _internal_add_fields();
  public:
  const ::lsmsearch::StoreIndexField& fields(int index) const;
  ::lsmsearch::StoreIndexField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >&
      fields() const;

  // @@protoc_insertion_point(class_scope:lsmsearch.StoreDocValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_5fstore_2eproto;
};
// -------------------------------------------------------------------

class StoreMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsmsearch.StoreMeta) */ {
 public:
  inline StoreMeta() : StoreMeta(nullptr) {}
  ~StoreMeta() override;

  StoreMeta(const StoreMeta& from);
  StoreMeta(StoreMeta&& from) noexcept
    : StoreMeta() {
    *this = ::std::move(from);
  }

  inline StoreMeta& operator=(const StoreMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreMeta& operator=(StoreMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreMeta& default_instance();

  static inline const StoreMeta* internal_default_instance() {
    return reinterpret_cast<const StoreMeta*>(
               &_StoreMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StoreMeta& a, StoreMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreMeta* New() const final {
    return CreateMaybeMessage<StoreMeta>(nullptr);
  }

  StoreMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreMeta& from);
  void MergeFrom(const StoreMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsmsearch.StoreMeta";
  }
  protected:
  explicit StoreMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_5fstore_2eproto);
    return ::descriptor_table_search_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalDocumentsFieldNumber = 1,
    kDeleteDocumentsFieldNumber = 2,
    kIncreaseSeqFieldNumber = 3,
    kTermsCountFieldNumber = 4,
  };
  // optional uint64 total_documents = 1;
  bool has_total_documents() const;
  private:
  bool _internal_has_total_documents() const;
  public:
  void clear_total_documents();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_documents() const;
  void set_total_documents(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_documents() const;
  void _internal_set_total_documents(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 delete_documents = 2;
  bool has_delete_documents() const;
  private:
  bool _internal_has_delete_documents() const;
  public:
  void clear_delete_documents();
  ::PROTOBUF_NAMESPACE_ID::uint64 delete_documents() const;
  void set_delete_documents(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_delete_documents() const;
  void _internal_set_delete_documents(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 increase_seq = 3;
  bool has_increase_seq() const;
  private:
  bool _internal_has_increase_seq() const;
  public:
  void clear_increase_seq();
  ::PROTOBUF_NAMESPACE_ID::uint64 increase_seq() const;
  void set_increase_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_increase_seq() const;
  void _internal_set_increase_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 terms_count = 4;
  bool has_terms_count() const;
  private:
  bool _internal_has_terms_count() const;
  public:
  void clear_terms_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 terms_count() const;
  void set_terms_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_terms_count() const;
  void _internal_set_terms_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lsmsearch.StoreMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_documents_;
  ::PROTOBUF_NAMESPACE_ID::uint64 delete_documents_;
  ::PROTOBUF_NAMESPACE_ID::uint64 increase_seq_;
  ::PROTOBUF_NAMESPACE_ID::uint64 terms_count_;
  friend struct ::TableStruct_search_5fstore_2eproto;
};
// -------------------------------------------------------------------

class MockData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsmsearch.MockData) */ {
 public:
  inline MockData() : MockData(nullptr) {}
  ~MockData() override;

  MockData(const MockData& from);
  MockData(MockData&& from) noexcept
    : MockData() {
    *this = ::std::move(from);
  }

  inline MockData& operator=(const MockData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MockData& operator=(MockData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MockData& default_instance();

  static inline const MockData* internal_default_instance() {
    return reinterpret_cast<const MockData*>(
               &_MockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MockData& a, MockData& b) {
    a.Swap(&b);
  }
  inline void Swap(MockData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MockData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MockData* New() const final {
    return CreateMaybeMessage<MockData>(nullptr);
  }

  MockData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MockData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MockData& from);
  void MergeFrom(const MockData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MockData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsmsearch.MockData";
  }
  protected:
  explicit MockData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_5fstore_2eproto);
    return ::descriptor_table_search_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MockData_Type Type;
  static constexpr Type kUnknown =
    MockData_Type_kUnknown;
  static constexpr Type kUpdate =
    MockData_Type_kUpdate;
  static constexpr Type kMerge =
    MockData_Type_kMerge;
  static constexpr Type kDelete =
    MockData_Type_kDelete;
  static constexpr Type kDeleteRange =
    MockData_Type_kDeleteRange;
  static inline bool Type_IsValid(int value) {
    return MockData_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    MockData_Type_Type_MIN;
  static constexpr Type Type_MAX =
    MockData_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    MockData_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return MockData_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return MockData_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return MockData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kEndKeyFieldNumber = 5,
    kColumnTypeFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // required bytes key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required bytes value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional bytes end_key = 5;
  bool has_end_key() const;
  private:
  bool _internal_has_end_key() const;
  public:
  void clear_end_key();
  const std::string& end_key() const;
  void set_end_key(const std::string& value);
  void set_end_key(std::string&& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  std::string* mutable_end_key();
  std::string* release_end_key();
  void set_allocated_end_key(std::string* end_key);
  private:
  const std::string& _internal_end_key() const;
  void _internal_set_end_key(const std::string& value);
  std::string* _internal_mutable_end_key();
  public:

  // required uint32 column_type = 1;
  bool has_column_type() const;
  private:
  bool _internal_has_column_type() const;
  public:
  void clear_column_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_type() const;
  void set_column_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_type() const;
  void _internal_set_column_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .lsmsearch.MockData.Type type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::lsmsearch::MockData_Type type() const;
  void set_type(::lsmsearch::MockData_Type value);
  private:
  ::lsmsearch::MockData_Type _internal_type() const;
  void _internal_set_type(::lsmsearch::MockData_Type value);
  public:

  // @@protoc_insertion_point(class_scope:lsmsearch.MockData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_type_;
  int type_;
  friend struct ::TableStruct_search_5fstore_2eproto;
};
// -------------------------------------------------------------------

class MockDataList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsmsearch.MockDataList) */ {
 public:
  inline MockDataList() : MockDataList(nullptr) {}
  ~MockDataList() override;

  MockDataList(const MockDataList& from);
  MockDataList(MockDataList&& from) noexcept
    : MockDataList() {
    *this = ::std::move(from);
  }

  inline MockDataList& operator=(const MockDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MockDataList& operator=(MockDataList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MockDataList& default_instance();

  static inline const MockDataList* internal_default_instance() {
    return reinterpret_cast<const MockDataList*>(
               &_MockDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MockDataList& a, MockDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(MockDataList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MockDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MockDataList* New() const final {
    return CreateMaybeMessage<MockDataList>(nullptr);
  }

  MockDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MockDataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MockDataList& from);
  void MergeFrom(const MockDataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MockDataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsmsearch.MockDataList";
  }
  protected:
  explicit MockDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_5fstore_2eproto);
    return ::descriptor_table_search_5fstore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMockDataListFieldNumber = 1,
  };
  // repeated .lsmsearch.MockData mock_data_list = 1;
  int mock_data_list_size() const;
  private:
  int _internal_mock_data_list_size() const;
  public:
  void clear_mock_data_list();
  ::lsmsearch::MockData* mutable_mock_data_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::MockData >*
      mutable_mock_data_list();
  private:
  const ::lsmsearch::MockData& _internal_mock_data_list(int index) const;
  ::lsmsearch::MockData* _internal_add_mock_data_list();
  public:
  const ::lsmsearch::MockData& mock_data_list(int index) const;
  ::lsmsearch::MockData* add_mock_data_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::MockData >&
      mock_data_list() const;

  // @@protoc_insertion_point(class_scope:lsmsearch.MockDataList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::MockData > mock_data_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoreIndexField

// required uint32 field_id = 1;
inline bool StoreIndexField::_internal_has_field_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoreIndexField::has_field_id() const {
  return _internal_has_field_id();
}
inline void StoreIndexField::clear_field_id() {
  field_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::_internal_field_id() const {
  return field_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::field_id() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreIndexField.field_id)
  return _internal_field_id();
}
inline void StoreIndexField::_internal_set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  field_id_ = value;
}
inline void StoreIndexField::set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.field_id)
}

// required uint32 field_flag = 2;
inline bool StoreIndexField::_internal_has_field_flag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StoreIndexField::has_field_flag() const {
  return _internal_has_field_flag();
}
inline void StoreIndexField::clear_field_flag() {
  field_flag_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::_internal_field_flag() const {
  return field_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::field_flag() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreIndexField.field_flag)
  return _internal_field_flag();
}
inline void StoreIndexField::_internal_set_field_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  field_flag_ = value;
}
inline void StoreIndexField::set_field_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_field_flag(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.field_flag)
}

// required uint32 field_type = 3;
inline bool StoreIndexField::_internal_has_field_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StoreIndexField::has_field_type() const {
  return _internal_has_field_type();
}
inline void StoreIndexField::clear_field_type() {
  field_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::_internal_field_type() const {
  return field_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::field_type() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreIndexField.field_type)
  return _internal_field_type();
}
inline void StoreIndexField::_internal_set_field_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  field_type_ = value;
}
inline void StoreIndexField::set_field_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_field_type(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.field_type)
}

// optional uint64 numeric_value = 4;
inline bool StoreIndexField::_internal_has_numeric_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StoreIndexField::has_numeric_value() const {
  return _internal_has_numeric_value();
}
inline void StoreIndexField::clear_numeric_value() {
  numeric_value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreIndexField::_internal_numeric_value() const {
  return numeric_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreIndexField::numeric_value() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreIndexField.numeric_value)
  return _internal_numeric_value();
}
inline void StoreIndexField::_internal_set_numeric_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  numeric_value_ = value;
}
inline void StoreIndexField::set_numeric_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_numeric_value(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.numeric_value)
}

// optional bytes string_value = 5;
inline bool StoreIndexField::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoreIndexField::has_string_value() const {
  return _internal_has_string_value();
}
inline void StoreIndexField::clear_string_value() {
  string_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoreIndexField::string_value() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreIndexField.string_value)
  return _internal_string_value();
}
inline void StoreIndexField::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.string_value)
}
inline std::string* StoreIndexField::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:lsmsearch.StoreIndexField.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& StoreIndexField::_internal_string_value() const {
  return string_value_.Get();
}
inline void StoreIndexField::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StoreIndexField::set_string_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lsmsearch.StoreIndexField.string_value)
}
inline void StoreIndexField::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lsmsearch.StoreIndexField.string_value)
}
inline void StoreIndexField::set_string_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lsmsearch.StoreIndexField.string_value)
}
inline std::string* StoreIndexField::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StoreIndexField::release_string_value() {
  // @@protoc_insertion_point(field_release:lsmsearch.StoreIndexField.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoreIndexField::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lsmsearch.StoreIndexField.string_value)
}

// repeated bytes terms = 6;
inline int StoreIndexField::_internal_terms_size() const {
  return terms_.size();
}
inline int StoreIndexField::terms_size() const {
  return _internal_terms_size();
}
inline void StoreIndexField::clear_terms() {
  terms_.Clear();
}
inline std::string* StoreIndexField::add_terms() {
  // @@protoc_insertion_point(field_add_mutable:lsmsearch.StoreIndexField.terms)
  return _internal_add_terms();
}
inline const std::string& StoreIndexField::_internal_terms(int index) const {
  return terms_.Get(index);
}
inline const std::string& StoreIndexField::terms(int index) const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreIndexField.terms)
  return _internal_terms(index);
}
inline std::string* StoreIndexField::mutable_terms(int index) {
  // @@protoc_insertion_point(field_mutable:lsmsearch.StoreIndexField.terms)
  return terms_.Mutable(index);
}
inline void StoreIndexField::set_terms(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.terms)
  terms_.Mutable(index)->assign(value);
}
inline void StoreIndexField::set_terms(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.terms)
  terms_.Mutable(index)->assign(std::move(value));
}
inline void StoreIndexField::set_terms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lsmsearch.StoreIndexField.terms)
}
inline void StoreIndexField::set_terms(int index, const void* value, size_t size) {
  terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lsmsearch.StoreIndexField.terms)
}
inline std::string* StoreIndexField::_internal_add_terms() {
  return terms_.Add();
}
inline void StoreIndexField::add_terms(const std::string& value) {
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lsmsearch.StoreIndexField.terms)
}
inline void StoreIndexField::add_terms(std::string&& value) {
  terms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lsmsearch.StoreIndexField.terms)
}
inline void StoreIndexField::add_terms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lsmsearch.StoreIndexField.terms)
}
inline void StoreIndexField::add_terms(const void* value, size_t size) {
  terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lsmsearch.StoreIndexField.terms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StoreIndexField::terms() const {
  // @@protoc_insertion_point(field_list:lsmsearch.StoreIndexField.terms)
  return terms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StoreIndexField::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:lsmsearch.StoreIndexField.terms)
  return &terms_;
}

// optional uint32 suffix_len = 10;
inline bool StoreIndexField::_internal_has_suffix_len() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StoreIndexField::has_suffix_len() const {
  return _internal_has_suffix_len();
}
inline void StoreIndexField::clear_suffix_len() {
  suffix_len_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::_internal_suffix_len() const {
  return suffix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoreIndexField::suffix_len() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreIndexField.suffix_len)
  return _internal_suffix_len();
}
inline void StoreIndexField::_internal_set_suffix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  suffix_len_ = value;
}
inline void StoreIndexField::set_suffix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_suffix_len(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreIndexField.suffix_len)
}

// -------------------------------------------------------------------

// StoreDocument

// required uint64 document_id = 1;
inline bool StoreDocument::_internal_has_document_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoreDocument::has_document_id() const {
  return _internal_has_document_id();
}
inline void StoreDocument::clear_document_id() {
  document_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreDocument::_internal_document_id() const {
  return document_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreDocument::document_id() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreDocument.document_id)
  return _internal_document_id();
}
inline void StoreDocument::_internal_set_document_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  document_id_ = value;
}
inline void StoreDocument::set_document_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_document_id(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreDocument.document_id)
}

// repeated .lsmsearch.StoreIndexField fields = 2;
inline int StoreDocument::_internal_fields_size() const {
  return fields_.size();
}
inline int StoreDocument::fields_size() const {
  return _internal_fields_size();
}
inline void StoreDocument::clear_fields() {
  fields_.Clear();
}
inline ::lsmsearch::StoreIndexField* StoreDocument::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:lsmsearch.StoreDocument.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >*
StoreDocument::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:lsmsearch.StoreDocument.fields)
  return &fields_;
}
inline const ::lsmsearch::StoreIndexField& StoreDocument::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::lsmsearch::StoreIndexField& StoreDocument::fields(int index) const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreDocument.fields)
  return _internal_fields(index);
}
inline ::lsmsearch::StoreIndexField* StoreDocument::_internal_add_fields() {
  return fields_.Add();
}
inline ::lsmsearch::StoreIndexField* StoreDocument::add_fields() {
  // @@protoc_insertion_point(field_add:lsmsearch.StoreDocument.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >&
StoreDocument::fields() const {
  // @@protoc_insertion_point(field_list:lsmsearch.StoreDocument.fields)
  return fields_;
}

// -------------------------------------------------------------------

// StoreDocValue

// repeated .lsmsearch.StoreIndexField fields = 1;
inline int StoreDocValue::_internal_fields_size() const {
  return fields_.size();
}
inline int StoreDocValue::fields_size() const {
  return _internal_fields_size();
}
inline void StoreDocValue::clear_fields() {
  fields_.Clear();
}
inline ::lsmsearch::StoreIndexField* StoreDocValue::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:lsmsearch.StoreDocValue.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >*
StoreDocValue::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:lsmsearch.StoreDocValue.fields)
  return &fields_;
}
inline const ::lsmsearch::StoreIndexField& StoreDocValue::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::lsmsearch::StoreIndexField& StoreDocValue::fields(int index) const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreDocValue.fields)
  return _internal_fields(index);
}
inline ::lsmsearch::StoreIndexField* StoreDocValue::_internal_add_fields() {
  return fields_.Add();
}
inline ::lsmsearch::StoreIndexField* StoreDocValue::add_fields() {
  // @@protoc_insertion_point(field_add:lsmsearch.StoreDocValue.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::StoreIndexField >&
StoreDocValue::fields() const {
  // @@protoc_insertion_point(field_list:lsmsearch.StoreDocValue.fields)
  return fields_;
}

// -------------------------------------------------------------------

// StoreMeta

// optional uint64 total_documents = 1;
inline bool StoreMeta::_internal_has_total_documents() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoreMeta::has_total_documents() const {
  return _internal_has_total_documents();
}
inline void StoreMeta::clear_total_documents() {
  total_documents_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::_internal_total_documents() const {
  return total_documents_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::total_documents() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreMeta.total_documents)
  return _internal_total_documents();
}
inline void StoreMeta::_internal_set_total_documents(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  total_documents_ = value;
}
inline void StoreMeta::set_total_documents(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_documents(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreMeta.total_documents)
}

// optional uint64 delete_documents = 2;
inline bool StoreMeta::_internal_has_delete_documents() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoreMeta::has_delete_documents() const {
  return _internal_has_delete_documents();
}
inline void StoreMeta::clear_delete_documents() {
  delete_documents_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::_internal_delete_documents() const {
  return delete_documents_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::delete_documents() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreMeta.delete_documents)
  return _internal_delete_documents();
}
inline void StoreMeta::_internal_set_delete_documents(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  delete_documents_ = value;
}
inline void StoreMeta::set_delete_documents(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_delete_documents(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreMeta.delete_documents)
}

// optional uint64 increase_seq = 3;
inline bool StoreMeta::_internal_has_increase_seq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StoreMeta::has_increase_seq() const {
  return _internal_has_increase_seq();
}
inline void StoreMeta::clear_increase_seq() {
  increase_seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::_internal_increase_seq() const {
  return increase_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::increase_seq() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreMeta.increase_seq)
  return _internal_increase_seq();
}
inline void StoreMeta::_internal_set_increase_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  increase_seq_ = value;
}
inline void StoreMeta::set_increase_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_increase_seq(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreMeta.increase_seq)
}

// optional uint64 terms_count = 4;
inline bool StoreMeta::_internal_has_terms_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StoreMeta::has_terms_count() const {
  return _internal_has_terms_count();
}
inline void StoreMeta::clear_terms_count() {
  terms_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::_internal_terms_count() const {
  return terms_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreMeta::terms_count() const {
  // @@protoc_insertion_point(field_get:lsmsearch.StoreMeta.terms_count)
  return _internal_terms_count();
}
inline void StoreMeta::_internal_set_terms_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  terms_count_ = value;
}
inline void StoreMeta::set_terms_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_terms_count(value);
  // @@protoc_insertion_point(field_set:lsmsearch.StoreMeta.terms_count)
}

// -------------------------------------------------------------------

// MockData

// required uint32 column_type = 1;
inline bool MockData::_internal_has_column_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MockData::has_column_type() const {
  return _internal_has_column_type();
}
inline void MockData::clear_column_type() {
  column_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MockData::_internal_column_type() const {
  return column_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MockData::column_type() const {
  // @@protoc_insertion_point(field_get:lsmsearch.MockData.column_type)
  return _internal_column_type();
}
inline void MockData::_internal_set_column_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  column_type_ = value;
}
inline void MockData::set_column_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_type(value);
  // @@protoc_insertion_point(field_set:lsmsearch.MockData.column_type)
}

// required bytes key = 2;
inline bool MockData::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MockData::has_key() const {
  return _internal_has_key();
}
inline void MockData::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MockData::key() const {
  // @@protoc_insertion_point(field_get:lsmsearch.MockData.key)
  return _internal_key();
}
inline void MockData::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:lsmsearch.MockData.key)
}
inline std::string* MockData::mutable_key() {
  // @@protoc_insertion_point(field_mutable:lsmsearch.MockData.key)
  return _internal_mutable_key();
}
inline const std::string& MockData::_internal_key() const {
  return key_.Get();
}
inline void MockData::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MockData::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lsmsearch.MockData.key)
}
inline void MockData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lsmsearch.MockData.key)
}
inline void MockData::set_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lsmsearch.MockData.key)
}
inline std::string* MockData::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MockData::release_key() {
  // @@protoc_insertion_point(field_release:lsmsearch.MockData.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MockData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lsmsearch.MockData.key)
}

// required bytes value = 3;
inline bool MockData::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MockData::has_value() const {
  return _internal_has_value();
}
inline void MockData::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MockData::value() const {
  // @@protoc_insertion_point(field_get:lsmsearch.MockData.value)
  return _internal_value();
}
inline void MockData::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lsmsearch.MockData.value)
}
inline std::string* MockData::mutable_value() {
  // @@protoc_insertion_point(field_mutable:lsmsearch.MockData.value)
  return _internal_mutable_value();
}
inline const std::string& MockData::_internal_value() const {
  return value_.Get();
}
inline void MockData::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MockData::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lsmsearch.MockData.value)
}
inline void MockData::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lsmsearch.MockData.value)
}
inline void MockData::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lsmsearch.MockData.value)
}
inline std::string* MockData::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MockData::release_value() {
  // @@protoc_insertion_point(field_release:lsmsearch.MockData.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MockData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lsmsearch.MockData.value)
}

// required .lsmsearch.MockData.Type type = 4;
inline bool MockData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MockData::has_type() const {
  return _internal_has_type();
}
inline void MockData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::lsmsearch::MockData_Type MockData::_internal_type() const {
  return static_cast< ::lsmsearch::MockData_Type >(type_);
}
inline ::lsmsearch::MockData_Type MockData::type() const {
  // @@protoc_insertion_point(field_get:lsmsearch.MockData.type)
  return _internal_type();
}
inline void MockData::_internal_set_type(::lsmsearch::MockData_Type value) {
  assert(::lsmsearch::MockData_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void MockData::set_type(::lsmsearch::MockData_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lsmsearch.MockData.type)
}

// optional bytes end_key = 5;
inline bool MockData::_internal_has_end_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MockData::has_end_key() const {
  return _internal_has_end_key();
}
inline void MockData::clear_end_key() {
  end_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MockData::end_key() const {
  // @@protoc_insertion_point(field_get:lsmsearch.MockData.end_key)
  return _internal_end_key();
}
inline void MockData::set_end_key(const std::string& value) {
  _internal_set_end_key(value);
  // @@protoc_insertion_point(field_set:lsmsearch.MockData.end_key)
}
inline std::string* MockData::mutable_end_key() {
  // @@protoc_insertion_point(field_mutable:lsmsearch.MockData.end_key)
  return _internal_mutable_end_key();
}
inline const std::string& MockData::_internal_end_key() const {
  return end_key_.Get();
}
inline void MockData::_internal_set_end_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MockData::set_end_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  end_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lsmsearch.MockData.end_key)
}
inline void MockData::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:lsmsearch.MockData.end_key)
}
inline void MockData::set_end_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lsmsearch.MockData.end_key)
}
inline std::string* MockData::_internal_mutable_end_key() {
  _has_bits_[0] |= 0x00000004u;
  return end_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MockData::release_end_key() {
  // @@protoc_insertion_point(field_release:lsmsearch.MockData.end_key)
  if (!_internal_has_end_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return end_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MockData::set_allocated_end_key(std::string* end_key) {
  if (end_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lsmsearch.MockData.end_key)
}

// -------------------------------------------------------------------

// MockDataList

// repeated .lsmsearch.MockData mock_data_list = 1;
inline int MockDataList::_internal_mock_data_list_size() const {
  return mock_data_list_.size();
}
inline int MockDataList::mock_data_list_size() const {
  return _internal_mock_data_list_size();
}
inline void MockDataList::clear_mock_data_list() {
  mock_data_list_.Clear();
}
inline ::lsmsearch::MockData* MockDataList::mutable_mock_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:lsmsearch.MockDataList.mock_data_list)
  return mock_data_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::MockData >*
MockDataList::mutable_mock_data_list() {
  // @@protoc_insertion_point(field_mutable_list:lsmsearch.MockDataList.mock_data_list)
  return &mock_data_list_;
}
inline const ::lsmsearch::MockData& MockDataList::_internal_mock_data_list(int index) const {
  return mock_data_list_.Get(index);
}
inline const ::lsmsearch::MockData& MockDataList::mock_data_list(int index) const {
  // @@protoc_insertion_point(field_get:lsmsearch.MockDataList.mock_data_list)
  return _internal_mock_data_list(index);
}
inline ::lsmsearch::MockData* MockDataList::_internal_add_mock_data_list() {
  return mock_data_list_.Add();
}
inline ::lsmsearch::MockData* MockDataList::add_mock_data_list() {
  // @@protoc_insertion_point(field_add:lsmsearch.MockDataList.mock_data_list)
  return _internal_add_mock_data_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsmsearch::MockData >&
MockDataList::mock_data_list() const {
  // @@protoc_insertion_point(field_list:lsmsearch.MockDataList.mock_data_list)
  return mock_data_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lsmsearch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lsmsearch::MockData_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lsmsearch::MockData_Type>() {
  return ::lsmsearch::MockData_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_search_5fstore_2eproto
